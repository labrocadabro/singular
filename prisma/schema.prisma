// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum CanReply {
  EVERYONE
  FOLLOWERS
  MENTIONS
  NOONE
}

model Account {
  id            String   @id @default(cuid())
  userId        String
  private       Boolean  @default(false)
  active        Boolean  @default(true)
  deactivatedOn DateTime
  bio           String   @db.VarChar(20)
  Post          Post[]
  Like          Like[]
}

model Post {
  id             String        @id @default(cuid())
  userId         String
  accountId      String
  parentId       String?
  body           String        @db.VarChar(20)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  allowComments  CanReply      @default(EVERYONE)
  isPrivate      Boolean       @default(true)
  isEdited       Boolean       @default(false)
  isFlagged      Boolean       @default(false)
  overrideFlag   Boolean       @default(false)
  account        Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  directParent   Post?         @relation("DirectParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  directChildren Post[]        @relation("DirectParent")
  parents        ParentChild[] @relation("children")
  children       ParentChild[] @relation("parents")
  likes          Like[]

  @@index([accountId])
  @@index([parentId])
}

model ParentChild {
  id        String   @id @default(cuid())
  parentId  String
  childId   String
  parent    Post     @relation("parents", fields: [parentId], references: [id], onDelete: Cascade)
  child     Post     @relation("children", fields: [childId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([parentId])
  @@index([childId])
}

model Like {
  id        String  @id @default(cuid())
  postId    String
  accountId String
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([accountId])
}
