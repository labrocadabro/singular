// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum CanReply {
  EVERYONE
  FOLLOWERS
  MENTIONS
  NOONE
}

model AuthUser {
  id           String        @id @unique
  username     String        @unique
  avatar       String        @default("/avatars/default.png") @db.TinyText
  auth_session AuthSession[]
  auth_key     AuthKey[]
  Post         Post[]
  Like         Like[]

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

// model Account {
//   id            String   @id @default(cuid())
//   userId        String
//   private       Boolean  @default(false)
//   active        Boolean  @default(true)
//   deactivatedOn DateTime
//   bio           String   @db.VarChar(20)
//   photo         String   @db.TinyText
//   Post          Post[]
//   Like          Like[]
// }

model Post {
  id             String        @id @default(cuid())
  userId         String
  parentId       String?
  body           String        @db.VarChar(20)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  allowComments  CanReply      @default(EVERYONE)
  isPrivate      Boolean       @default(true)
  isEdited       Boolean       @default(false)
  isFlagged      Boolean       @default(false)
  overrideFlag   Boolean       @default(false)
  user           AuthUser      @relation(fields: [userId], references: [id], onDelete: Cascade)
  directParent   Post?         @relation("DirectParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  directChildren Post[]        @relation("DirectParent")
  parents        ParentChild[] @relation("children")
  children       ParentChild[] @relation("parents")
  likes          Like[]

  @@index([userId])
  @@index([parentId])
}

model ParentChild {
  id        String   @id @default(cuid())
  parentId  String
  childId   String
  parent    Post     @relation("parents", fields: [parentId], references: [id], onDelete: Cascade)
  child     Post     @relation("children", fields: [childId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([parentId])
  @@index([childId])
}

model Like {
  id     String   @id @default(cuid())
  postId String
  userId String
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   AuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}
